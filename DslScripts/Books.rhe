// Represents a business module, and a namespace in C# code.
Module Bookstore {

	AutoDetectSqlDependencies;

	// represents a business object (C# class) and a table in database that contains the object's data
	Entity Book {
		// properties
		ShortString Code { AutoCode; }
		ShortString Title;
		Reference Author Bookstore.Person;
		// Integer NumberOfPages;
		// Day 2 Simple business rules
		Integer NumberOfPages { MinValue 1; }
		Reference Genre Bookstore.Genre;
		DateTime InsertedAt { CreationTime; DenyUserEdit; }
		//Day 4
		// Deactivatable { DeactivateOnDelete };
		Reference AssignedTo Bookstore.Employee;
		RowPermissions {

        AllowRead EveryoneCanRead 'context => book => true';

        Allow OwnerCanWrite 'context =>
            {
                Guid employeeId = context.Repository
                    .Bookstore.Employee.Query()
                    .Where(e => e.UserName == context.UserInfo.UserName)
                    .Select( e => e.ID)
                    .SingleOrDefault();
                return book => book.AssignedTo.ID == employeeId;
            }';

        // Better:
        AllowWrite OwnerCanWrite2 'context =>
            {
                return book => book.AssignedTo.UserName == context.UserInfo.UserName;
            }';
    }

		// business features
		ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
		InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';
		
		// Day 3
		ItemFilter LongBooks 'item => item.NumberOfPages >= 500';

		ItemFilter ForeignAuthorXWithComments 'item =>
            item.Author.Name.StartsWith("X")
            && item.Extension_ForeignBook.ID != null
            && _domRepository.Bookstore.Comment.Subquery.Where(c => c.BookID == item.ID).Count() >= 3';
		
		ComposableFilterBy LongBooks2 '(query, repository, parameter) => {
            return query.Where(item => item.NumberOfPages >= 500);
        }';

		ComposableFilterBy LongBooks3 '(query, repository, parameter) => {
            var filtered = query.Where(item => item.NumberOfPages >= parameter.MinimumPages);
            if (parameter.ForeignBooksOnly == true)
                filtered = filtered.Where(item => item.Extension_ForeignBook.ID != null);
            return filtered;
        }';

		FilterBy ComplexSearch '(repository, parameter) => {
            var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
            if (parameter.ForeignBooksOnly == true)
                query = query.Where(item => item.Extension_ForeignBook.ID != null);
            Book[] books = query.ToSimple().ToArray();

            if (parameter.MaskTitles == true)
                foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title)))
                    book.Title = book.Title.First() + "***" + book.Title.Last();

            return books;
        }';
		
		// Day 4 
		// MonitoredRecord;

        // The "MonitoredRecord”" concept will generate the following features:
        // DateTime CreatedAt { CreationTime; DenyUserEdit; }
        // Logging { AllProperties; }
	}

	// Day 4 Save method
	Entity Review {
        Reference Book { Required; }
        Integer Score { Required; MinValue 1; MaxValue 5; }
        LongString Text;
		DateTime LastModifiedTime;

        SaveMethod
        {
             Initialization DefaultTextFromScore
            '
                foreach (var item in insertedNew)
                    if (string.IsNullOrEmpty(item.Text) && item.Score != null)
                        item.Text = item.Score.Value >= 3
                            ? "I like it"
                            : "I don''t like it";
            ';
			OnSaveUpdate UpdateLastModifiedTime
			'
				foreach(var item in updatedNew) {
					// item.LastModifiedTime = Date.Now();
				}
				
			';
        }
    }

	Entity Comment
{
    LongString Text;
    Reference Book { Detail; }

    RowPermissions
    {
        AllowRead EveryoneCanRead 'context =>
            {
                return comment => comment.Book.AssignedTo.ID != null;
            }';

        Allow OwnerCanWrite 'context =>
            {
                Guid employeeId = context.Repository
                    .Bookstore.Employee.Query()
                    .Where(e => e.UserName == context.UserInfo.UserName)
                    .Select(e => e.ID)
                    .SingleOrDefault();

                return comment => comment.Book.AssignedTo.ID == employeeId;
            }';

        // Better:
        InheritFrom Bookstore.Comment.Book;
    }
}

	// Day 3 Filters and other read methods
	Parameter LongBooks2 { }
	Parameter LongBooks3 {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
    }
	Parameter ComplexSearch {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
    }
	Parameter PersonFilter {
        ShortString NamePattern;
        Integer LimitResultCount;
    }
	// Day 3 - Data validation
	Entity BookRating {
        Extends Bookstore.Book;
        Decimal Rating; // ComputedFrom Bookstore.ComputeBookRating
    }
	
	Entity Disposal {
		Reference Book { Required; }
		LongString Explanation { Required; }
		DateTime EffectiveSince { CreationTime; }

		ItemFilter ImportantBookExplanation 'item => item.Book.Title.Contains("important") && item.Explanation.Length < 50';
		InvalidData ImportantBookExplanation 'When disposing an important book, the explanation should be at least 50 characters long.';

		ItemFilter HighRating 'item => item.Book.Extension_BookRating.Rating > 100';
		InvalidData HighRating 'You are not allowed to dispose a book with rating above 100.';
	}

	// Day 3 - Low-level database concepts
	SqlProcedure ComputePersonInfo
        "@NamePattern NVARCHAR(256), @LimitResultCount INT"
        "
            SELECT TOP (@LimitResultCount)
                p.ID, Name, NameLength = LEN(p.Name), PersonID = p.ID
            FROM
                Bookstore.Person p
            WHERE
                p.Name LIKE '%' + @NamePattern + '%'
            ORDER BY
                p.Name
        ";

	Computed PersonInfo 'repository => { throw new Rhetos.UserException("Use filter \"Bookstore.PersonFilter\" to read the data."); }'  {
        ShortString Name;
        Integer NameLength;
        Guid PersonID;

        FilterBy PersonFilter
            '(repository, parameter) =>
            {
                // Always separate parameters to prevent SQL injection.
                string sql = "EXEC Bookstore.ComputePersonInfo @p0, @p1";
                var sqlParams = new object[] { parameter.NamePattern, parameter.LimitResultCount };

                var result = _executionContext.EntityFrameworkContext.Database
                    .SqlQuery<Bookstore.PersonInfo>(sql, sqlParams)
                    .ToArray();
                return result;
            }';
    }

	// SQL View
	 SqlView BookView 'SELECT * FROM Bookstore.Book' { }
	
	// Entities and properties
	Entity Person {
		ShortString Name; 
	}

	// One-to-many relationship (master-detail)
	// Entity Comment {
    //    Reference Book { Detail; }
    //    LongString Text;
    // }

	// Many-to-many relationship (join table)
	Entity Topic {
		ShortString Name { Unique; Required; }
	}

	Entity BookTopic {
		Reference Book { Detail; }
		Reference Topic { Required; }

		UniqueMultiple 'Book Topic';
	}

	// One-to-one relationship (extensions)
	Entity ChildrensBook {
		Extends Bookstore.Book;

		Integer AgeFrom;
		Integer AgeTo;
		IntegerRange AgeFrom AgeTo; // A simple validation.
	}

	Entity ForeignBook {
		Extends Bookstore.Book;

		ShortString OriginalLanguage;
		Reference Translator Bookstore.Person;
	}

	// Additionall assignment
	// a) Each employee has name and a unique VAT number.
	Entity Employee {
		ShortString UserName;
		ShortString Name;
		Integer VAT;
	}

	// b) Some of the employees are managers (1:1 relationship to Employee entity), each manager has additional textual information on bonuses.
	Entity Manager {
		Extends Bookstore.Employee;

		ShortString Bonuses;
	}

	// c) Each employee can have multiple education records, with date and description (1:N relationship).
	Entity EducationRecord {
		Reference Employee { Detail; } // Detail: adds Required, CascadeDelete and SqlIndex

		ShortString Description;
		DateTime EducationDate;
	}

	// d) Bookstore has departments, each department has a unique code and description.
	Entity Department {
		ShortString Code { AutoCode; } // AutoCode generates Unique constraint
		ShortString Description;
	}

	// e) Each employee is assigned to one or more departments (N:N relationship).
	Entity EmployeeDepartment {
		Reference Employee { Detail; }
		Reference Department { Required; }
	}

	// Day 2 Read only data structures
	// 2) Total number of topics for each book
	SqlQueryable NumberOfTopicsPerBook
    "
        SELECT
            b.ID,
            NumberOfTopics = COUNT(bt.ID)
        FROM
            Bookstore.Book b
            LEFT JOIN Bookstore.BookTopic bt ON bt.BookID = b.ID
        GROUP BY
            b.ID
    "
	{
		Extends Bookstore.Book;
		Integer NumberOfTopics;

		AutodetectSqlDependencies;
	}
	
	// The bookstore application should contain a grid that displays a list of books, with three columns: BookName, AuthorName and NumberOfTopics. Create a data source for the grid (write a new Browse that takes data from entities Book, Person and the previously created SqlQueryable)
	Browse BookList Bookstore.Book {
		Take Title;
		Take 'Author.Name';
		Take NumberOfTopics 'Extension_NumberOfTopicsPerBook.NumberOfTopics';
	}

	// Demonstrate adding a Genre entity with two entries, review the generated records in database.
	// Tested using SQL in DB
	Hardcoded Genre {
		ShortString Label;
		LongString Description;
		Bool IsFiction;

		Entry ScienceFiction {
			Value Label 'Science fiction';
			Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
			Value IsFiction 1;
		}

		Entry Biography {
			Value Label 'Biography';
			Value Description 'A written narrative of a person''s life.';
			Value IsFiction 0;
		}
	}

	Action InsertManyBooks
    '(parameter, repository, userInfo) => {
        for (int i = 0; i < parameter.NumberOfBooks; i++)
        {
            string newTitle = parameter.TitlePrefix + " - " + (i + 1);
            var newBook = new Bookstore.Book { Code = "+++", Title = newTitle };
            repository.Bookstore.Book.Insert(newBook);
        }
    }'
	{
		Integer NumberOfBooks;
		ShortString TitlePrefix;
	}

	Action CreatePrincipal '(parameter, repository, userInfo) => {
        var principal = new Common.Principal
        {
            ID = parameter.ID ?? Guid.NewGuid(),
            Name = parameter.Name
        };
        repository.Common.Principal.Insert(principal);
    }'
    {
        Guid ID;
        ShortString Name;
    }
}

// Nested statements written in flat format

// Module Bookstore;
// Entity Bookstore.Book;
// ShortString Bookstore.Book.Code; 
// AutoCode Bookstore.Book.Code;
// ShortString Bookstore.Book.Title;
// Integer Bookstore.Book.NumberOfPages;
// ItemFilter Bookstore.Book.CommonMisspelling 'book => book.Title.Contains("curiousity")';
// InvalidData Bookstore.Book.CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';
// Logging Bookstore.Book;