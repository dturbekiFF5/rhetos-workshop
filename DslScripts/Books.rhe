// Represents a business module, and a namespace in C# code.
Module Bookstore {
	// represents a business object (C# class) and a table in database that contains the object's data
	Entity Book {
		// properties
		ShortString Code { AutoCode; }
		ShortString Title;
		Reference Author Bookstore.Person;
		// Integer NumberOfPages;
		// Day 2 Simple business rules
		Integer NumberOfPages { MinValue 1; }
		Reference Genre Bookstore.Genre;
		DateTime InsertedAt { CreationTime; DenyUserEdit; }

		
		// business features
		ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
		InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';

		Logging { AllProperties; }
	}

	// Entities and properties
	Entity Person {
		ShortString Name;
	}

	// One-to-many relationship (master-detail)
	Entity Comment {
        Reference Book { Detail; }
        LongString Text;
    }

	// Many-to-many relationship (join table)
	Entity Topic {
		ShortString Name { Unique; Required; }
	}

	Entity BookTopic {
		Reference Book { Detail; }
		Reference Topic { Required; }

		UniqueMultiple 'Book Topic';
	}

	// One-to-one relationship (extensions)
	Entity ChildrensBook {
		Extends Bookstore.Book;

		Integer AgeFrom;
		Integer AgeTo;
		IntegerRange AgeFrom AgeTo; // A simple validation.
	}

	Entity ForeignBook {
		Extends Bookstore.Book;

		ShortString OriginalLanguage;
		Reference Translator Bookstore.Person;
	}

	// Additionall assignment
	// a) Each employee has name and a unique VAT number.
	Entity Employee {
		ShortString Name;
		Integer VAT;
	}

	// b) Some of the employees are managers (1:1 relationship to Employee entity), each manager has additional textual information on bonuses.
	Entity Manager {
		Extends Bookstore.Employee;

		ShortString Bonuses;
	}

	// c) Each employee can have multiple education records, with date and description (1:N relationship).
	Entity EducationRecord {
		Reference Employee { Detail; } // Detail: adds Required, CascadeDelete and SqlIndex

		ShortString Description;
		DateTime EducationDate;
	}

	// d) Bookstore has departments, each department has a unique code and description.
	Entity Department {
		ShortString Code { AutoCode; } // AutoCode generates Unique constraint
		ShortString Description;
	}

	// e) Each employee is assigned to one or more departments (N:N relationship).
	Entity EmployeeDepartment {
		Reference Employee { Detail; }
		Reference Department { Required; }
	}

	// Day 2 Read only data structures
	// 2) Total number of topics for each book
	SqlQueryable NumberOfTopicsPerBook
    "
        SELECT
            b.ID,
            NumberOfTopics = COUNT(bt.ID)
        FROM
            Bookstore.Book b
            LEFT JOIN Bookstore.BookTopic bt ON bt.BookID = b.ID
        GROUP BY
            b.ID
    "
	{
		Extends Bookstore.Book;
		Integer NumberOfTopics;

		AutodetectSqlDependencies;
	}
	
	// The bookstore application should contain a grid that displays a list of books, with three columns: BookName, AuthorName and NumberOfTopics. Create a data source for the grid (write a new Browse that takes data from entities Book, Person and the previously created SqlQueryable)
	Browse BookList Bookstore.Book {
		Take Title;
		Take 'Author.Name';
		Take NumberOfTopics 'Extension_NumberOfTopicsPerBook.NumberOfTopics';
	}

	// Demonstrate adding a Genre entity with two entries, review the generated records in database.
	// Tested using SQL in DB
	Hardcoded Genre {
		ShortString Label;
		LongString Description;
		Bool IsFiction;

		Entry ScienceFiction {
			Value Label 'Science fiction';
			Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
			Value IsFiction 1;
		}

		Entry Biography {
			Value Label 'Biography';
			Value Description 'A written narrative of a person''s life.';
			Value IsFiction 0;
		}
	}

	Action InsertManyBooks
    '(parameter, repository, userInfo) => {
        for (int i = 0; i < parameter.NumberOfBooks; i++)
        {
            string newTitle = parameter.TitlePrefix + " - " + (i + 1);
            var newBook = new Bookstore.Book { Code = "+++", Title = newTitle };
            repository.Bookstore.Book.Insert(newBook);
        }
    }'
	{
		Integer NumberOfBooks;
		ShortString TitlePrefix;
	}

	Action CreatePrincipal '(parameter, repository, userInfo) => {
        var principal = new Common.Principal
        {
            ID = parameter.ID ?? Guid.NewGuid(),
            Name = parameter.Name
        };
        repository.Common.Principal.Insert(principal);
    }'
    {
        Guid ID;
        ShortString Name;
    }
	
}

// Nested statements written in flat format

// Module Bookstore;
// Entity Bookstore.Book;
// ShortString Bookstore.Book.Code; 
// AutoCode Bookstore.Book.Code;
// ShortString Bookstore.Book.Title;
// Integer Bookstore.Book.NumberOfPages;
// ItemFilter Bookstore.Book.CommonMisspelling 'book => book.Title.Contains("curiousity")';
// InvalidData Bookstore.Book.CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';
// Logging Bookstore.Book;